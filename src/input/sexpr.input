-- left and right identities
RID has RIDAX
LID has LIDAX
ID has IDAX
ID has RIDAX
ID has LIDAX
-- separate * and + associative and commutative
ASSOCT has ASSAXT
ASSOCT has ASSAX
ASSOCP has ASSAXP
ASSOCP has ASSAX
-- domain with no automatic simplifications
s:Symbolic(Integer,None) := 1+1+1
simplify s
s::Expression Integer
retract s
test(s=3)
-- symbols can be assigned a rank
(S,T):Symbolic(Integer,None)
smaller?(S,T)
rank(S::Symbol,1)$SINF
smaller?(S,T)

-- domain with many automatic simplifications
(x,y,z):SymbolicExpression Integer
x::Expression Integer
x+x = 2*x
test %
x-x = 0
test %
x+y = y+x
test %
x+(y+z)= (x+y)+z
test %
x*x = x^2
test %
x/x = 1
test %
x*(1/x) = 1
test %
x*y = y*x
test %
x+1/y
simplify %
x*(y*z)= (x*y)*z
test %
x*(y+z) = x*y + x*z
test %
smaller?(x*x,x*y)
smaller?(x*y,y*y)
xxxy:=x*x+x*y
yy:=y*y
smaller?(xxxy,yy)
x*x+x*y+y*y
x^2+2*x*y+y^2
factor %
expand((x+y)/z)
expand(x*(y+z))
x*z+y*z+x*y
--
exp(x+1) = %e*exp(x)
test map(simplify, %)
nthRoot(x, y)
nthRoot(x,2)=sqrt(x)
test %
(nthRoot(x,2)=sqrt(x))@Boolean
--
variables(sin(x*y)+2*z)
kernels(sin(x*y)+2*z)
-- automatic boxing of sub-expressions
numer((1/x+1)/y*x+x^2/y)
denom((1/x+1)/y*x+x^2/y)
-- Symbolic Trig
smaller?(cos(y), sin(x))
smaller?(sin(x),cos(y))
cos(y)*sin(x)
sin(x)+cos(x)+tan(x)
asin(x)+acos(x)+atan(x)
sin(x)^2 + cos(x)^2 = 1
test map(simplify,%)
--
-- Kurt's examples
--
SEI==>SymbolicExpression INT
(x,y):SEI
(x+y)^2
r0:=(x+y)^2
r0::InputForm
rs := simplify r0
factor rs
convert(r)$SEI
coerce(r)$SEI
-- Wrong result !!
sum(x,'x=1..10)
reduce(+,[n::SEXPR INT for n in 1..10])
(x+y)^x
exp(-x)
-x
exp(-x)::InputForm
f:=operator 'f
f(x)
f(0$SEXPR INT)
f(0$EXPR INT)
D(x^2,'x)
simplify %
x^n
-- Known problems
-- 1) need to handle %diff operator
D(x^n,'x)
D(p^n,'p)
--
-- Rewrite Rules
-- Interpreter bug: to ensure proper types need _rule(x,y) instead of rule x==y
--
ru1:=_rule(x,y)
ru1(z)
ru2:=_rule(x+1,y)
ru2(z+1)
ru3:=_rule(cos(x), z)
ru3 cos(x)+sin(y)
ru3 cos(x)*sin(y)
--
t1 := cos(x)*sin(y) - cos(y)*sin(x)
t2 := - sin(x)*sin(y) + cos(x)*cos(y)
expr := tan(q)*tan(w) + t1*cos(x3) + t2*w*cos(a) + r3*t1*t2 + 5
rs:=_rule(cos(x)*sin(y)-sin(x)*cos(y), sin(y-x))
rc:=_rule(cos(x)*cos(y)-sin(x)*sin(y), cos(x+y))
rs t1
rs t2
rc t1
rc t2
rc rs expr
--
-- Anti-commutative symbols
--
